{
    // 在TypeScript中，泛型是一种创建可复用代码组件的工具。这种组件不只能被一种类型使用，而是能被[多种类型复用]。
    // 类似于参数的作用，泛型是一种用以增强类（classes）、类型（types）和接口（interfaces）能力的非常可靠的手段。
    // 泛型可以适用于多个类型，不同于any，它不会丢失信息，保持准确性，传入数值类型并返回数值类型，保证类型安全。
    // 一般用T，也可以用其他字母
    let fn1 = function <T>(arg: T) : T{
        return arg
    }
    // 这里明确的指定了T是number类型，并做为一个参数传给函数，使用了<number>
    fn1<number>(123);
    // fn1<number>('aaa');// 报错

    // 第二种方法更普遍。利用了类型推论 -- 即编译器会根据传入的参数自动地帮助我们确定T的类型：
    fn1('aaa');
    // *注意我们没必要使用尖括号（<>）来明确地传入类型；编译器可以查看myString的值，然后把T设置为它的类型。 
    // 类型推论帮助我们保持代码【精简和高可读性】。
    // 如果编译器不能够自动地推断出类型的话，在一些复杂的情况下，这是可能出现的，那就只能像上面<number>这样传入。

    let fn2 = function <T>(arg: T): T {
        // T类型变量代表的是任意类型，不确定是否有length属性，所以不能用
        // arg.length;  // Error: T doesn't have .length
        return arg;
    }
}